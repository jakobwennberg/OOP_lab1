High coupling:
När två eller fler moduler är starkt beroende av varandra. Detta
innebär att en förändring i en modul kan kräva förändringar i flera
andra moduler, vilket gör kodbasen skör och svår att hantera.

Low cohesion:
När en modul hanterar många olika orelaterade ansvarsområden,
vilket gör koden svår att förstå och underhålla.

Dependency Inversion Principle (DIP):
* Hög-nivå-moduler ska inte bero på låg-nivå-moduler, båda ska
  bero på abstraktioner.
* Abstraktioner ska inte bero på detaljer - detaljer ska bero på
  abstraktioner.
* Oftast menar man att det är bättre med t.ex. interfaces som
  inte implementerar konkreta metoder, och att flera moduler
  istället implementerar interfacet istället för att skapa
  beroenden mellan varandra.

Baserat på detta:
* Vilka beroenden är nödvändiga? (för kodbasen vi fick)
    - Att CarController använder Car-klassen för att kunna
      kalla på t.ex. gas(). Den skapar även instanser av
      Volvo240, Saab95 och Scania och lägger i en lista
      som TimerListener använder. För att CarController ska funka
      som tänkt (styra alla bilar) så är detta nödvändigt.
    - När vi skapar en CarView så skickar vi in en
      CarController som argument. CarView skapar sedan
      en referensvariabel till denna CarController för
      att kunna 'koppla' sina knappar till CarControllers
      metoder.
    - Om inte CarView hade haft en DrawPanel så hade inte
      bilarna/workshop ritats ut då DrawPanel ansvarar
      för detta.

* Vilka klasser är beroende av varandra som inte borde vara det?
    - Om main-funktionen inte låg i CarController så borde vi kunna
      ungefär denna struktur:
      +--------------+    +--------------+
      |    Main      | -->| CarController|
      +--------------+    +--------------+
             |
             v
      +------------------+
      |  TimerListener  |
      +------------------+
             |
             v
      +-------------+
      |  CarView    |
      +-------------+
         |         |
         v         v
      +-------------+   +---------------+
      |  DrawPanel  |   | CarController |
      +-------------+   +---------------+




